
import matplotlib.pyplot as plt
import numpy as np
def trap_two_pointers(height: list[int]) -> int:
    if not height:
        return 0

    left, right = 0, len(height) - 1
    max_left, max_right = height[left], height[right]
    total_water = 0

    while left < right:

        if max_left < max_right:
            left += 1
            max_left = max(max_left, height[left])
            total_water += max_left - height[left]
        else:
            right -= 1
            max_right = max(max_right, height[right])
            total_water += max_right - height[right]
            
    return total_water

def trap_dp(height: list[int]) -> int:

    if not height:
        return 0

    n = len(height)
    left_max = [0] * n
    right_max = [0] * n

    left_max[0] = height[0]
    for i in range(1, n):
        left_max[i] = max(height[i], left_max[i-1])

    right_max[n-1] = height[n-1]
    for i in range(n-2, -1, -1):
        right_max[i] = max(height[i], right_max[i+1])
    total_water = 0
    for i in range(n):
        water_level = min(left_max[i], right_max[i])
        trapped = water_level - height[i]
        if trapped > 0:
            total_water += trapped
            
    return total_water

def visualize_trapped_water(height: list[int]):

    if not height:
        print("Cannot visualize an empty elevation map.")
        return

    n = len(height)
    total_water = trap_two_pointers(height)

    left_max = [0] * n
    left_max[0] = height[0]
    for i in range(1, n):
        left_max[i] = max(height[i], left_max[i-1])

    right_max = [0] * n
    right_max[n-1] = height[n-1]
    for i in range(n-2, -1, -1):
        right_max[i] = max(height[i], right_max[i+1])

    plt.figure(figsize=(12, 6))
    width = 0.8

    positions = np.arange(n)
    plt.bar(positions, height, width=width, color='black', edgecolor='grey', label='Elevation Map')

    for i in range(n):
        water_level = min(left_max[i], right_max[i])
        if water_level > height[i]:
            water_height = water_level - height[i]
            plt.bar(i, water_height, width=width, bottom=height[i], color='blue', alpha=0.6, label='Trapped Water' if i == 1 else "")

    plt.title(f'Trapping Rain Water\nTotal Trapped Water: {total_water} units', fontsize=16)
    plt.xlabel('Position', fontsize=12)
    plt.ylabel('Height', fontsize=12)
    plt.xticks(positions, [str(h) for h in height])
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.legend()
    plt.show()

test_cases = [
    [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1],
    [4, 2, 0, 3, 2, 5],
    [5, 4, 3, 2, 1, 2, 3, 4, 5],
    [3, 0, 3],
    [],
    [5, 5, 5, 5]
]

for i, heights in enumerate(test_cases):
    print(f"--- Test Case {i+1} ---")
    print(f"Input Elevation Map: {heights}")

    water_trapped = trap_two_pointers(heights)
    print(f"Result (Two Pointers): {water_trapped} units of water trapped.")

    water_trapped_dp = trap_dp(heights)
    print(f"Result (Dynamic Prog.): {water_trapped_dp} units of water trapped.")
    
    visualize_trapped_water(heights)
    print("\n" + "="*40 + "\n")
